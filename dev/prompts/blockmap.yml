# ai_prompts/blockmap.yml — 代表ブロックの“完全体”検索語（単一一致を保証する足場）
# 使い方: 置換時はここから該当ブロックの prev/anchor/next を取り出し、3Stepの「検索ワード」に貼る

# ai_prompts blockmap v2 (shorts-player-kit)
targets:
  - file: "index.html"
    ops:
      - name: "insert-tts-utils-before-debug"
        operation: "insert-after"
        anchors:
          prev: "<!-- MUST #2a: tts-voice-utils.js -->"
          anchor: "<!-- MUST #2: debug_panel.js, then MUST #3: player.core.js -->"
          next: "<script src=\"./debug_panel.js\" defer></script>"
        block: |
          <!-- MUST #2a: tts-voice-utils.js -->
          <script src="./js/tts-voice-utils.js" defer></script>

          <!-- MUST #2: debug_panel.js, then MUST #3: player.core.js -->
          <script src="./debug_panel.js" defer></script>
          <script src="./player.core.js" defer></script>

  - file: "player.core.js"
    ops:
      - name: "wireup-tts-setup-in-init"
        operation: "replace-block"
        anchors:
          prev: "/* ===== Init ===== */"
          anchor: "async function init() {"
          next: "init();"
        block: |
          /* ===== Init ===== */
          async function init() {
            setBackdropFromBase(null, 'A');
            applyThemeClass('A');
            try {
              const res = await fetch('./scenes.json', { cache: 'no-store' });
              if (!res.ok) throw new Error('HTTP ' + res.status);
              videoData = await res.json();
              window.__ttsUtils && window.__ttsUtils.setup(videoData.videoMeta?.tts || {});
              scenes = Array.isArray(videoData.scenes) ? videoData.scenes : [];
              banner.textContent = (videoData.videoMeta && videoData.videoMeta.bannerText) || '';
              renderScene(0);
              playBtn.addEventListener('click', () => { if (!isPlaying) playSequence(); }, { once: true });
            } catch (e) {
              content.textContent = 'scenes.json の読み込み、または初期化に失敗しました: ' + e;
              console.error(e);
            }
          }
          init();

  - file: "js/tts-voice-utils.js"
    ops:
      - name: "create-tts-voice-utils"
        operation: "replace-file"
        anchors:
          prev: ""
          anchor: "FILE_START"
          next: ""
        block: |
          ;(()=>{
            const state = { catalog: [], byId: new Map(), ready: false, lang: 'ja-JP', prefs: [] };
            function refreshVoices(){
              const ss = window.speechSynthesis;
              const all = (ss && ss.getVoices) ? ss.getVoices() : [];
              const groups = Object.create(null);
              function parseQual(name){
                const n=(name||''); const lower=n.toLowerCase();
                const enhanced=/enhanced|premium|extended|拡張/.test(lower)||/-enhanced|-premium/.test(lower);
                let base=n.replace(/[（(].*?[)）]/g,'').replace(/\\b(enhanced|premium|extended|拡張)\\b/ig,'').replace(/\\s+/g,' ').trim();
                base=base.replace(/o[\\s\\-_]?ren/ig,'O-ren');
                base=base.replace(/siri\\s*(声|voice)?\\s*([12])/i,'Siri 声 $2');
                return { base, enhanced };
              }
              function isJapanese(v){
                const name=(v.name||'').toLowerCase(), lang=(v.lang||'').toLowerCase();
                if (lang.indexOf('ja')===0) return true;
                return /kyoko|otoya|o[\\s\\-_]?ren|hattori|ichiro|sakura|mizuki|takumi|sayaka|siri|声\\s*[12]/.test(name);
              }
              const cat=[];
              for (let i=0;i<all.length;i++){
                const v=all[i]; if(!isJapanese(v)) continue;
                const q=parseQual(v.name||''); const id=v.voiceURI||((v.lang||'')+'|'+(v.name||''));
                const it={ id, name:v.name||'voice', lang:v.lang||'', base:q.base, enhanced:q.enhanced };
                const g=groups[q.base]||(groups[q.base]={});
                if(it.enhanced) g.enhanced=it; else if(!g.standard) g.standard=it;
              }
              Object.keys(groups).forEach(k=>{
                const g=groups[k]; const ch=g.enhanced||g.standard; if(!ch) return;
                const label=ch.base+(ch.enhanced?'〔拡張〕':'（標準）');
                cat.push({ id: ch.id, name: ch.name, lang: ch.lang, label });
              });
              state.catalog=cat; state.byId.clear(); cat.forEach(v=>state.byId.set(v.id,v));
              state.ready=cat.length>0;
              window.__ttsVoiceCatalog = cat;
            }
            function setup(opts={}){
              if (opts.lang) state.lang=opts.lang;
              if (Array.isArray(opts.voicePreferences)) state.prefs=opts.voicePreferences.slice();
              refreshVoices();
            }
            function pick(role){
              const cand=state.catalog.filter(v=>!state.lang||(v.lang||'').startsWith(state.lang));
              for (const pref of state.prefs){ const hit=cand.find(v=>(v.name||'').includes(pref)); if(hit) return hit; }
              return cand[0]||state.catalog[0]||null;
            }
            if (window.speechSynthesis){
              if (typeof window.speechSynthesis.onvoiceschanged==='function'){
                const prev=window.speechSynthesis.onvoiceschanged;
                window.speechSynthesis.onvoiceschanged=function(ev){ try{prev.call(this,ev);}catch(e){} refreshVoices(); };
              } else {
                window.speechSynthesis.onvoiceschanged=refreshVoices;
              }
              refreshVoices();
              if (!state.ready){ setTimeout(refreshVoices,200); setTimeout(refreshVoices,600); setTimeout(refreshVoices,1200); }
            }
            window.__ttsUtils={ setup, pick, getCatalog:()=>state.catalog.slice() };
          })();